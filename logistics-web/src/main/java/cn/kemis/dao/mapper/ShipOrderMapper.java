package cn.kemis.dao.mapper;

import cn.kemis.dao.BaseMapper;
import cn.kemis.domain.SchoolOrderDomain;
import cn.kemis.domain.ShipOrderAndGoodsDomain;
import cn.kemis.domain.ShipOrderDomain;
import cn.kemis.model.ShipOrder;
import cn.kemis.model.ShipOrderExample;
import cn.kemis.model.SysConfiguration;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.Update;

import java.util.List;
import java.util.Map;

/**
 * This class was generated by MyBatis Generator.
 * This class corresponds to the database table ship_order
 *
 * @mbggenerated Sun Sep 25 20:32:23 CST 2016
 */
@Mapper
public interface ShipOrderMapper extends BaseMapper<ShipOrder, ShipOrderExample> {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ship_order
     *
     * @mbggenerated Sun Sep 25 20:32:23 CST 2016
     */
    int countByExample(ShipOrderExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ship_order
     *
     * @mbggenerated Sun Sep 25 20:32:23 CST 2016
     */
    int deleteByExample(ShipOrderExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ship_order
     *
     * @mbggenerated Sun Sep 25 20:32:23 CST 2016
     */
    @Delete({
            "delete from ship_order",
            "where shipOrderId = #{shipOrderId,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long shipOrderId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ship_order
     *
     * @mbggenerated Sun Sep 25 20:32:23 CST 2016
     */
    @Insert({
            "insert into ship_order (batchNo, userId, ",
            "userName, province, ",
            "city, district, ",
            "schoolId, school, ",
            "theClass, consignee, ",
            "mobile, delivery, ",
            "address, totalCount, ",
            "unitCredits, subject, ",
            "campusAmbassador, expressId, ",
            "printExpress, outExpress, ",
            "outVerify, teacherTag, bigPackage, ",
            "`status`, createTime, ",
            "updateTime)",
            "values (#{batchNo,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, ",
            "#{userName,jdbcType=VARCHAR}, #{province,jdbcType=VARCHAR}, ",
            "#{city,jdbcType=VARCHAR}, #{district,jdbcType=VARCHAR}, ",
            "#{schoolId,jdbcType=VARCHAR}, #{school,jdbcType=VARCHAR}, ",
            "#{theClass,jdbcType=VARCHAR}, #{consignee,jdbcType=VARCHAR}, ",
            "#{mobile,jdbcType=VARCHAR}, #{delivery,jdbcType=VARCHAR}, ",
            "#{address,jdbcType=VARCHAR}, #{totalCount,jdbcType=SMALLINT}, ",
            "#{unitCredits,jdbcType=VARCHAR}, #{subject,jdbcType=VARCHAR}, ",
            "#{campusAmbassador,jdbcType=BIT}, #{expressId,jdbcType=BIGINT}, ",
            "#{printExpress,jdbcType=BIT}, #{outExpress,jdbcType=BIT}, ",
            "#{outVerify,jdbcType=BIT}, #{teacherTag,jdbcType=BIT}, #{bigPackage,jdbcType=BIT}, ",
            "#{status,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, ",
            "#{updateTime,jdbcType=TIMESTAMP})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="shipOrderId", before=false, resultType=Long.class)
    int insert(ShipOrder record);
    @Insert({"insert into ship_order (userId,userName,batchNo,  province,  city, district, mobile,                              address, expressId,totalCount,consignee,status,teacherTag,sourceOrder)",
            "values (#{userId,jdbcType=VARCHAR}," ,
            "#{userName,jdbcType=VARCHAR},",
            "#{batchNo,jdbcType=VARCHAR},#{province,jdbcType=VARCHAR},",
            "#{city,jdbcType=VARCHAR},#{district,jdbcType=VARCHAR},",
            "#{mobile,jdbcType=VARCHAR},#{address,jdbcType=VARCHAR}, ",
            "#{expressId,jdbcType=BIGINT},#{totalCount,jdbcType=SMALLINT},",
            "#{consignee,jdbcType=VARCHAR},#{status,jdbcType=TINYINT}," ,
            "#{teacherTag,jdbcType=BIT},#{sourceOrder,jdbcType=INTEGER})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="shipOrderId", before=false, resultType=Long.class)
    int insertShipOrders(ShipOrder record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ship_order
     *
     * @mbggenerated Sun Sep 25 20:32:23 CST 2016
     */
    int insertSelective(ShipOrder record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ship_order
     *
     * @mbggenerated Sun Sep 25 20:32:23 CST 2016
     */
    List<ShipOrder> selectByExample(ShipOrderExample example);

    @Insert({})
    /*    @Select({"select province from ship_order where batchNo = #{batchNo,jdbcType=VARCHAR} and teacherTag = b'0' and `status` = 1 group by province order by CONVERT( province USING gbk )"})
*/
    //原订单id是sourceOrder都是为空的 所以还没有写***************
    @Select({"select ship_order.sourceOrder, ship_order.status,ship_order.batchNo,expressNumber from ship_order,express where ship_order.expressId=express.expressId AND sourceOrder in (#{sourceOrder,jdbcType=INTEGER})"})
    Map<String,Object> selectShipOrderByShipOrderIds(@Param("sourceOrder")Long shipOrderId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ship_order
     *
     * @mbggenerated Sun Sep 25 20:32:23 CST 2016
     */
    @Select({
            "select",
            "shipOrderId, batchNo, userId, userName, province, city, district, schoolId, ",
            "school, theClass, consignee, mobile, delivery, address, totalCount, unitCredits, ",
            "subject, campusAmbassador, expressId, printExpress, outExpress, outVerify, teacherTag, ",
            "bigPackage, `status`, createTime, updateTime",
            "from ship_order",
            "where shipOrderId = #{shipOrderId,jdbcType=BIGINT}"
    })
    @ResultMap("cn.kemis.dao.mapper.ShipOrderMapper.BaseResultMap")
    ShipOrder selectByPrimaryKey(Long shipOrderId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ship_order
     *
     * @mbggenerated Sun Sep 25 20:32:23 CST 2016
     */
    int updateByExampleSelective(@Param("record") ShipOrder record, @Param("example") ShipOrderExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ship_order
     *
     * @mbggenerated Sun Sep 25 20:32:23 CST 2016
     */
    int updateByExample(@Param("record") ShipOrder record, @Param("example") ShipOrderExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ship_order
     *
     * @mbggenerated Sun Sep 25 20:32:23 CST 2016
     */
    int updateByPrimaryKeySelective(ShipOrder record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table ship_order
     *
     * @mbggenerated Sun Sep 25 20:32:23 CST 2016
     */
    @Update({
            "update ship_order",
            "set batchNo = #{batchNo,jdbcType=VARCHAR},",
            "userId = #{userId,jdbcType=VARCHAR},",
            "userName = #{userName,jdbcType=VARCHAR},",
            "province = #{province,jdbcType=VARCHAR},",
            "city = #{city,jdbcType=VARCHAR},",
            "district = #{district,jdbcType=VARCHAR},",
            "schoolId = #{schoolId,jdbcType=VARCHAR},",
            "school = #{school,jdbcType=VARCHAR},",
            "theClass = #{theClass,jdbcType=VARCHAR},",
            "consignee = #{consignee,jdbcType=VARCHAR},",
            "mobile = #{mobile,jdbcType=VARCHAR},",
            "delivery = #{delivery,jdbcType=VARCHAR},",
            "address = #{address,jdbcType=VARCHAR},",
            "totalCount = #{totalCount,jdbcType=SMALLINT},",
            "unitCredits = #{unitCredits,jdbcType=VARCHAR},",
            "subject = #{subject,jdbcType=VARCHAR},",
            "campusAmbassador = #{campusAmbassador,jdbcType=BIT},",
            "expressId = #{expressId,jdbcType=BIGINT},",
            "printExpress = #{printExpress,jdbcType=BIT},",
            "outExpress = #{outExpress,jdbcType=BIT},",
            "outVerify = #{outVerify,jdbcType=BIT},",
            "teacherTag = #{teacherTag,jdbcType=BIT},",
            "bigPackage = #{bigPackage,jdbcType=BIT},",
            "`status` = #{status,jdbcType=TINYINT},",
            "createTime = #{createTime,jdbcType=TIMESTAMP},",
            "updateTime = #{updateTime,jdbcType=TIMESTAMP}",
            "where shipOrderId = #{shipOrderId,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(ShipOrder record);

    List<String> selectPorvinceListByBatchNo(@Param("batchNo") String batchNo);

    @Select({"select distinct school from ship_order",
            "where batchNo = #{batchNo,jdbcType=VARCHAR} and teacherTag = b'0' and `status` = 1",
            "group by school, province, city, district",
            "order by CONVERT( province USING gbk ), CONVERT( city USING gbk ), CONVERT( district USING gbk ), CONVERT( school USING gbk )"})
    List<String> selectSchoolListByBatchNo(@Param("batchNo")String batchNo);

    @Select({"select school, expressId from ship_order",
            "where batchNo = #{batchNo,jdbcType=VARCHAR} and province = #{province,jdbcType=VARCHAR} and delivery = #{delivery,jdbcType=VARCHAR} and teacherTag = b'0' and `status` = 1",
            "group by expressId",
            "order by CONVERT( province USING gbk ), CONVERT( city USING gbk ), CONVERT( district USING gbk ), CONVERT( school USING gbk ), CONVERT( consignee USING gbk ), CONVERT( theClass USING gbk )"})
    List<SchoolOrderDomain> selectSchoolListByBatchNoAndProvince(@Param("batchNo") String batchNo, @Param("province") String province, @Param("delivery") String delivery);

    //获取 count
    int countByMap(Map<String,Object> map);

    //获取列表
    List<ShipOrderDomain> selectByMap(Map<String, Object> param);

    // List<ShipOrderAndGoodsDomain> selectShipOrderByExample(ShipOrderExample example);

    List<String> selectPorvinceListByMap(Map<String, Object> param);

    List<ShipOrderAndGoodsDomain> selectDeliveryByShipOrder(ShipOrder record);

    List<ShipOrderAndGoodsDomain> selectDeliveryByRecord(ShipOrder record);

    @Select({"select * from ship_order where expressId =  #{expressId} group by delivery"})
    List<ShipOrder> selectByExpressIdGroupByDelivery(@Param("expressId")Long expressId);
}